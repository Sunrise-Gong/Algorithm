function solution(new_id) {
    //1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
    let one = new_id.toLowerCase()
    /*
    toLowerCase() 메소드로 대문자를 소문자로 바꾸도록 하겠습니다.
    */
    
    //2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
    let two = one.replace(/[^\w-_.]/g, '')
    /*
    replace메소드를 사용해 보도록 하겠습니다. 이 메소드는 
    첫번째 인자로 받은 문자열을 
    두번째 인자로 받은 문자열로 치환하는 메소드 입니다.
    
    지금은 제거가 목적이기 때문에 
    두번째 인자로는 빈 문자열을 넣도록하겠습니다.
    
    첫번째 인자에는 제거할 대상을 넣어줘야 하는데
    제거하지 않을 대상인 소문자, 숫자, 빼기, 밑줄, 마침표를 지정하여 
    나머지를 제거하는 방식으로 처리해보도록 하겠습니다.
    우선 정규식을 사용하기 위해서 슬래쉬를 사용하고
    
    g -> replace 메소드가 실행되었을 때 
    한번만 치환이 이루어지면 메소드가 종료 되는데
    제거해야할 대상이 중복해서 있을 수 있기 때문에
    이를 방지하기 위해 정규식의 글로벌을 사용해서 
    중복되는 문자열까지 치환이 모두 이루어지도록 하겠습니다.

    특수문자를 사용하기 위해서 역슬래쉬를 사용하고
    소문자, 숫자를 정규식에 따라 w 로 표현하고
    나머지 빼기, 밑줄, 마침표 를 붙여서 적은뒤
    대괄호로 감사주겠습니다. 
    서로 구분 없이 붙어있지만 대괄호를 사용하면
    개별적으로 인식을 하게 됩니다. 
    
    그리고 부정문자셋을 붙여서 
    대괄호 안의 소문자,숫자,빼기,밑줄,마침표를 제외한 나머지가 
    치환의 대상이 되도록 하겠습니다.
    
    (g 를 사용하는 이유는 
    replace 메소드는 문자열이 한번 치환이 되면 
    replace 메소드가 중단이 되는 특성이 있습니다.
    예를들어 가가나다.replace('가','나') -> 에서 
    현재 바라는 결과 값은 '나나나다' 인데
    실제 결과 값은 '나가나다' 로 
    '가'를 처음 만나서 '나'로 치환하는 순간 
    리턴한다는 것을 알 수 있습니다.)
    
    */


    //3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
    let three = two.replace(/\.{2,}/g, '.')

    /* 
    마침표가 두번 이상 연속된 부분을 하나의 마침표로 고쳐주기 위해서
    마찬가지로 replace 메소드를 사용해보겠습니다.
    2회 이상을 정규식으로 표현해야 하는데
    정규식에서는 {n,} 를 n회 이상 이라고 사용합니다.
    그래서 그 앞에 마침표를 찍고 2회 이상이니까 2라고 적어보도록 하겠습니다.
    두번째 인자로는 하나의 마침표를 넣어서 
    여러개의 마침표가 하나로 치환 되도록 하겠습니다.
    */
    
    //4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
    let four = three.replace(/^\.|\.$/g, '')
    
    /*  
    마침표가 처음 또는 끝에 위치하는 경우 제거하기 위해서
    마찬가지로 replace 메소드를 사용하겠습니다.
    
    처음을 나타내는 정규식으로 
    ^x -> 문자열이 x로 시작됨을 의미한다
    
    x|y -> | === or 

    끝을 나타내는 정규식으로 
    x$ -> 문자열이 x로 끝남을 의미한다
    
    */
    
    //5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
    let five = four.replace(/^$/, 'a')

    /* 
    아무것도 없는 빈 문자열의 경우 
    정규식에서는 부정문자셋과 $ 을 이용해서 표현합니다.
    이를 첫번째 인자로 넣고
    두번째 인자에 'a'를 넣어서 빈 문자열이 a 로 치환되도록 하겠습니다.
    */
    
    //6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
    //만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
    let six = five.slice(0,15).replace(/\.$/, '')

    /* 
    slice 메소드를 사용해서 0~14 인덱스를 제외한 나머지를 잘라내고 
    14번째 인덱스가 마침표라면
    replace 메소드를 사용해서
    마지막에 마침표를 빈 문자열로 치환하도록 하겠습니다.
    */
    
    //7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.
    let seven = six.length > 2 ? six : six + six.charAt(six.length - 1).repeat(3 - six.length)

    /* 
    변수 식스의 길이가 2 보다 크다면 
    그대로 식스를 변수 세븐에 할당하고
    
    길이가 2 이하라면
    마지막 문자를 길이가 3이 될때까지 반복해서 붙이기 위해
    문자열에서 특정 인덱스의 문자를 반환하는 
    charAt()찰엣 메소드를 사용해서 마지막 문자를 얻어내고
    
    인자로 들어간 숫자만큼 주어진 문자열을 반복해서 붙이는 
    repeat() 메소드를 사용해서 변수 six의 길이가 3이 되도록 만들어
    변수 세븐에 할당하도록 하겠습니다.
    */
    
    return seven;
}
//--------------------------------------------------------------------------------------------------
/* 
문제 설명
카카오에 입사한 신입 개발자 네오는 
카카오계정개발팀에 배치되어, 
카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. 

네오에게 주어진 첫 업무는 
새로 가입하는 유저들이 
카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 
입력된 아이디와 유사하면서 
규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.

다음은 카카오 아이디의 규칙입니다.
아이디의 길이는 3자 이상 15자 이하여야 합니다.

아이디는 
알파벳 소문자, 
숫자, 
빼기(-), 
밑줄(_), 
마침표(.) 
문자만 사용할 수 있습니다.

단, 마침표(.)는 처음과 끝에 사용할 수 없으며 
또한 연속으로 사용할 수 없습니다.

네오는 다음과 같이 7단계의 순차적인 처리 과정을 통해 
신규 유저가 입력한 아이디가 
카카오 아이디 규칙에 맞는 지 검사하고 
규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.

신규 유저가 입력한 아이디가 new_id 라고 한다면,

1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
6단계 new_id의 길이가 16자 이상이면, 
new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
7단계 new_id의 길이가 2자 이하라면, 
new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.

예를 들어, new_id 값이 ...!@BaT#*..y.abcdefghijklm 라면, 
위 7단계를 거치고 나면 new_id는 아래와 같이 변경됩니다.

1단계 대문자 'B'와 'T'가 소문자 'b'와 't'로 바뀌었습니다.
"...!@BaT#*..y.abcdefghijklm" → "...!@bat#*..y.abcdefghijklm"

2단계 '!', '@', '#', '*' 문자가 제거되었습니다.
"...!@bat#*..y.abcdefghijklm" → "...bat..y.abcdefghijklm"

3단계 '...'와 '..' 가 '.'로 바뀌었습니다.
"...bat..y.abcdefghijklm" → ".bat.y.abcdefghijklm"

4단계 아이디의 처음에 위치한 '.'가 제거되었습니다.
".bat.y.abcdefghijklm" → "bat.y.abcdefghijklm"

5단계 아이디가 빈 문자열이 아니므로 변화가 없습니다.
"bat.y.abcdefghijklm" → "bat.y.abcdefghijklm"

6단계 아이디의 길이가 16자 이상이므로, 
처음 15자를 제외한 나머지 문자들이 제거되었습니다.
"bat.y.abcdefghijklm" → "bat.y.abcdefghi"

7단계 아이디의 길이가 2자 이하가 아니므로 변화가 없습니다.
"bat.y.abcdefghi" → "bat.y.abcdefghi"

따라서 신규 유저가 입력한 new_id가 ...!@BaT#*..y.abcdefghijklm일 때, 
네오의 프로그램이 추천하는 새로운 아이디는 bat.y.abcdefghi 입니다.

[문제]
신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, 
네오가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 
return 하도록 solution 함수를 완성해 주세요.

[제한사항]
new_id는 길이 1 이상 1,000 이하인 문자열입니다.
new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.
new_id에 나타날 수 있는 특수문자는 -_.~!@#$%^&*()=+[{]}:?,<>/ 로 한정됩니다.

[입출력 예]
no	new_id	result
예1	"...!@BaT#*..y.abcdefghijklm"	"bat.y.abcdefghi"
예2	"z-+.^."	"z--"
예3	"=.="	"aaa"
예4	"123_.def"	"123_.def"
예5	"abcdefghijklmn.p"	"abcdefghijklmn"
입출력 예에 대한 설명

입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.
1단계 변화 없습니다.
2단계 "z-+.^." → "z-.."
3단계 "z-.." → "z-."
4단계 "z-." → "z-"
5단계 변화 없습니다.
6단계 변화 없습니다.
7단계 "z-" → "z--"

입출력 예 #3
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.
1단계 변화 없습니다.
2단계 "=.=" → "."
3단계 변화 없습니다.
4단계 "." → "" (new_id가 빈 문자열이 되었습니다.)
5단계 "" → "a"
6단계 변화 없습니다.
7단계 "a" → "aaa"

입출력 예 #4
1단계에서 7단계까지 거치는 동안 new_id(123_.def)는 변하지 않습니다. 즉, new_id가 처음부터 카카오의 아이디 규칙에 맞습니다.

입출력 예 #5
1단계 변화 없습니다.
2단계 변화 없습니다.
3단계 변화 없습니다.
4단계 변화 없습니다.
5단계 변화 없습니다.
6단계 "abcdefghijklmn.p" → "abcdefghijklmn." → "abcdefghijklmn"
7단계 변화 없습니다.
*/